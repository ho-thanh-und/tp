@startuml
!include style.puml
skinparam ArrowFontStyle plain

Actor User as user USER_COLOR

box UI UI_COLOR_T1
participant ":MainWindow" as MainWindow UI_COLOR
participant ":CommandBox" as CommandBox UI_COLOR
end box

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":ThemeCommandParser" as ThemeCommandParser LOGIC_COLOR
participant "d:ThemeCommand" as ThemeCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

[-> MainWindow
activate MainWindow
create CommandBox

MainWindow -> CommandBox: fillInnerParts()
activate CommandBox

CommandBox --> MainWindow
deactivate CommandBox
deactivate MainWindow
user -> CommandBox : User types in box "theme light"

activate CommandBox
CommandBox -> MainWindow: executeCommand("theme light")
activate MainWindow


MainWindow -> LogicManager : execute("theme light")




activate LogicManager

LogicManager -> AddressBookParser : parseCommand("theme light")
activate AddressBookParser

create ThemeCommandParser
AddressBookParser -> ThemeCommandParser
activate ThemeCommandParser

ThemeCommandParser --> AddressBookParser
deactivate ThemeCommandParser

AddressBookParser -> ThemeCommandParser : parse("light")
activate ThemeCommandParser

create ThemeCommand
ThemeCommandParser -> ThemeCommand
activate ThemeCommand

ThemeCommand --> ThemeCommandParser :
deactivate ThemeCommand

ThemeCommandParser --> AddressBookParser : d
deactivate ThemeCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
ThemeCommandParser -[hidden]-> AddressBookParser
destroy ThemeCommandParser

AddressBookParser --> LogicManager : d
deactivate AddressBookParser

LogicManager -> ThemeCommand: execute(m)
activate ThemeCommand


create CommandResult
ThemeCommand -> CommandResult

activate CommandResult
CommandResult --> ThemeCommand
deactivate CommandResult


ThemeCommand -> CommandResult : setTheme(Theme.LIGHT)
activate CommandResult
CommandResult --> ThemeCommand
deactivate CommandResult

ThemeCommand -> Model : setTheme(Theme.LIGHT)
activate Model

Model --> ThemeCommand
deactivate Model

ThemeCommand --> LogicManager : r
deactivate ThemeCommand

MainWindow <--LogicManager
deactivate LogicManager

MainWindow -> MainWindow: handleTheme(Theme.LIGHT)
activate MainWindow
MainWindow --> MainWindow
deactivate MainWindow

MainWindow --> CommandBox

user <-- CommandBox
deactivate CommandBox

[<-- MainWindow
deactivate MainWindow

@enduml
